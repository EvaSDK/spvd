#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Helper script to list checks available in SPV plugins. """

import os
import sys
import tempfile
import threading

from psycopg2.pool import ThreadedConnectionPool
import MySQLdb

sys.path.insert(1, '@pkgdatadir@/')
sys.path.insert(1, '@pkgdatadir@/plugins/')

import basejob

def main():
    pg_pool = ThreadedConnectionPool(1, 200, "host=localhost port=5432 user=sjspv password=sjspv dbname=rxtx")
    pg_conn = pg_pool.getconn()

    # Fetch id of the given group name
    cursor = pg_conn.cursor()
    cursor.execute("""SELECT grp_id FROM groups WHERE name=%(name)s""", {'name': sys.argv[1] })
    pg_conn.commit()
    grp_id = int(cursor.fetchone()[0])
    cursor.close()

    # Fetch the objects currently in spv db and assigned to this group
    cursor = pg_conn.cursor()
    cursor.execute("""SELECT * FROM objects
        JOIN objects_group ON objects.obj_id = objects_group.obj_id
        JOIN groups ON groups.grp_id = objects_group.grp_id
        AND groups.grp_id = %d""" % grp_id )
    pg_conn.commit()
    current_objects = cursor.fetchall()
    print "Number of rows returned: %d" % cursor.rowcount
    cursor.close()

    try:
        my_conn = MySQLdb.connect(host='devgis.lab', user='root', passwd='toto', db='gis_v3')
    except MySQLdb.Error, e:
        print "Error %d: %s" % (e.args[0], e.args[1])
        sys.exit (1)

    # Fetch streams to monitor in GISv3
    # Let the module do some work for us
    cursor = my_conn.cursor(MySQLdb.cursors.DictCursor)
    # Skip protected streams
    # Skip On-demand streams
    cursor.execute("""SELECT programme.nom as programme, meta.url as url
        FROM meta
        LEFT JOIN stream ON (stream.ID = meta.ID_stream)
        LEFT JOIN programme ON (programme.ID = stream.ID_programme)
        WHERE programme.nom <> ""
        AND meta.ID_format IN (%s)
        AND meta.ID_etat = 1
        AND stream.nom <> "On Demand"
        AND stream.aka = 0
        AND stream.supervision = 1
        ORDER BY programme.nom_dossier ASC
        """ % ",".join(['3', '4', '8', '9']))
    streams = cursor.fetchall()


    print "Number of rows returned: %d" % cursor.rowcount
    cursor.close()

    objects = [object[1] for object in current_objects]
    for stream in streams:
        url = stream['url']

        if url not in objects:
            print 'Adding %s to objects' % url
            cursor = pg_conn.cursor()
            query = 'INSERT INTO objects (address) VALUES (%(url)s)'
            cursor.execute(query, {'url': url})
            cursor.close()

            cursor = pg_conn.cursor()
            query = 'SELECT obj_id FROM objects WHERE address = %(url)s'
            cursor.execute(query, {'url': url})
            # Due to uniqueness constraint there can be only one result
            obj_id = cursor.fetchone()[0]
            cursor.close()

            cursor = pg_conn.cursor()
            query = 'INSERT INTO objects_group (obj_id, grp_id) VALUES (%d,%d)' % (obj_id, grp_id)
            cursor.execute(query)
            cursor.close()

    pg_conn.commit()
    pg_pool.putconn(pg_conn)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print 'Usage:', sys.argv[0], 'group_name'
        sys.exit(1)
    else:
        main()
